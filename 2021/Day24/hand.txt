inp w       w = in0
mul x 0     x = 0
add x z     x = z
mod x 26    x = z % 26
div z 1     z = z
add x 10    x = (z % 29) + 10
eql x w     x = ((z % 29) + 10) == in0 // ni true ker je 10 > 9
eql x 0     x = 1
mul y 0     y = 0
add y 25    y = 25
mul y x     y = 25
add y 1     y = 26
mul z y     z = 26z // tukaj 0
mul y 0     y = 0
add y w     y = in0
add y 2     y = in0 + 2
mul y x     y = in0+2
add z y     z = in0+2

div je 1 ali 26
check je <= 0 če div == 26, else > 9

1. Preberi input
2. Preveri če je input == (z % 26) + check
3. Če je div == 26 potem z /= 26
4. Če je 2. true -> do nothing else push input + offset na stack

Če je check pozitivn -> PUSH na stack
Če je check negativn -> POP, if poped + check != input -> PUSH npoped + offset
Nakonc hočemo da je stack prazn -> popped more bit enak input + check!!!!

CHECK = 10
OFFSET = 2

CHECK = 10
OFFSET = 4

CHECK = 14
OFFSET = 8

CHECK = 11
OFFSET = 7

CHECK = 14
OFFSET = 12

CHECK = -14
OFFSET = 7

CHECK = 0
OFFSET = 10

CHECK = 10
OFFSET = 14

CHECK = -10
OFFSET = 2

CHECK = 13
OFFSET = 6

CHECK = -12
OFFSET = 8

CHECK = -3
OFFSET = 11

CHECK = -11
OFFSET = 5

CHECK = -2
OFFSET = 11

10,2
10,4
14,8
11,7
14,12
-14,7
0,10
10,14
-10,2
13,6
-12,8
-3,11
-11,5
-2,11

PUSH in[0] + 2
PUSH in[1] + 4
PUSH in[2] + 8
PUSH in[3] + 7
PUSH in[4] + 12
POP in[5] == poped - 14
POP in[6] == poped - 0
PUSH in[7] + 14
POP in[8] == poped - 10
PUSH in[9] + 6
POP in[10] == poped - 12
POP in[11] == poped - 3
POP in[12] == poped - 11
POP in[13] == poped - 2

in[4] - 2 = in[5]
in[6] = in[3] + 7
in[8] = in[7] + 4
in[10] = in[9] - 6
in[11] = in[2] + 5
in[12] = in[1] - 7
in[13] = in[0]

in0 = 1...9
in1 = 8,9
in2 = 1,2,3,4
in3 = 1,2
in4 = 3,4,5,6,7,8,9
in5 = 1,2,3,4,5,6,7
in6 = 8,9
in7 = 1,2,3,4,5
in8 = 5,6,7,8,9
in9 = 7,8,9
in10 = 1,2,3
in11 = 6,7,8,9
in12 = 1,2
in13 = 1...9

BIGGEST:  {9,9,4,2,9,7,9,5,9,9,3,9,2,9} -> 99429795993929
SMALLEST: {1,8,1,1,3,1,8,1,5,7,1,6,1,1} -> 18113181571611